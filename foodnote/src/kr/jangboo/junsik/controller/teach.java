package kr.jangboo.junsik.controller;

public class teach {

	//변수명 영어로 줄일땐 영어 자음만 줄여서
	//string.format 으로공백 할 필요 없이 문자열 자체에 공백을 같이 넣을수 있다
	//자바 기술을 알아보자
	
	//다이아몬드 같은 경우엔 똑같은 for문 줄이는걸생각하자
	//공백 출력 메소드만 따로 거꾸로 메소드 따로 출력 따ㅑ로
	//그렇게 for문에 적용시키면굿
	
	//java.utill도 알아보자
	//개발용어에 익숙해지자
	//입력받게하지 생성자는 잘 안쓴다
	
	//같은 클래스 내에서 쓰는 메소드는 this.를 써보자(나도 남도 쉽게 알수있게)
	//print utills
	//String utills
	//utill 만들어진게 많으니 구경해보자
	//PrintOption,PrintUtills
	
	//정말 큰 숫자는 bicdecimer 에 intvalue를 쓰면 integer 가 나온다
	//new BigDecimal(charToStr).intValue() 를 쓰면 저절로 바꿔준다

	//배열 1 , 58
	//스트링 43, 
	
	//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	//전역 변수 금지
	//hashmap 을 하면 디버깅하기가 힘들어짐
	//liat > arayyList
	//List<Integer> intList = new ArrayList<>() 등처러 사용
	//hashMap 에서 Object를 되도록 안쓰도록 (런타임 엑세스 엉뚱한곳에서 날수가 있음)
	//알고리즘 위주로
	//마지막 문제 같은경우에는 hashmap 써서 사용가능
	//패키징을 할때는 방식 을 따라가자
	//목적에 맞게 만들기
	
	//데이터타입 월요일 오전에 풀면서 풀어볼만큼만 풀어보자
	//메소드 는 거꾸로 풀어보자ㄴ
	
	//다음주까지만
	//패키지 네이밍 클래스 네이밍
	//문제의 요점(알고리즘) 을 파악하장!!
	
	//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	//메소드명 다시 한번 주의
	//메소드의 주목적에 해당하는 이름 지정
	//null은 객체만 가질수 있다
	
	//밀리초로 전달 했으면 계산은 따로
	//파라미터로 전달 하여 한기능만 하는 메소드로 안하게끔
	//항상 어떤 숫자가 가도 클래스 콜 
	//클래스도 메소드를 콜하기전에 
	
	//메소드란 여러명한테 호출하기 위한 것이다!!!!!!
	//퍼블릭 을 하는 이유는 여러명이 쓰게 하기 위한것이다
	//적은 양의 코드는 메소드로 빼지 말자
	
	//푸는 문제가 비슷하다 싶으면 두 문제를 합쳐보는것도 좋다
	//가독성 중요
	//혼자만 보고 확인할수 있는 공식이나 if문은 좋은 코드가 아니다
	//주석이라도 화려하게 달아야 한다
	//if문 할때 정상인거 먼저 조건문
	//확인하고자 하는 메소드가 참/거짓 이거나 두가지라면 boolean 으로 하자
	//메소드는 본연의 기능만 너무 빼지는 말자
	//메소드명은 명사로 하지말고 동사로하자
	//아스키 코드 하지마 
	//굳이 할거면 유니코드
	//^[a-zA-Z0-9]{8,16}$ = 8~16글자 사이만 사용
	//다시 한번 말하지만 메소드를 만들었다면 여러기능에 쓰임이 가능하도록 파라미터로 넘겨주는식으로
	//mvc 이왕 할거면 명확하게 나눠지게
	
	//파라미터가 너무 길어지면 그 길어진 vo객체에 담아서 한번에 넘겨주는 것도
	//hashmap 명확하지 않을때, 애매할때
	//가변적사용할 때 명확할때
	
	//8월 3일@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
	//아에 처음 패키지를 따로 관리해야 자료가 많아질수록 관리가쉬어짐
	//무시하고 처음부터 제대로안하면 부매랑이 되어 돌아온다
	//정규표현식 또한같이 넘겨줘야지 메소드가 화룡가능
	//재기함수 찾아보자!!!
	//함 찾아보고 그에 대한 문제 풀어보자 어려우면그만
	//입출력 닫는 과정의 close는 트라이캐치 문에선 finally가서 작성해야함
	//트라이캐치 오류시 e.getMessage를 출력하여 명확하게 알려주자
	//메소드명에서 달라는건데 get을 썻는데  void를 썻다? 
	//말이 안되는 것
	//if문 무조건 정답 조건 먼저하라는게 아니고 두 결과값을 리턴해야한다면 정답먼저 하라는 이야기
	
	//boolead방식의 메소드를 굳이 result = true,false 등 을 하지말고
	//if문 조건에 따라 retrun true, return false 를 하자
	
	//변수명이 많고 길다면 초기화 시키는 거지 현업에서는 우선 쓴다
	//컨트롤에서 배열?등 등 만들어서 빈값을 파라미터로 넘기지 말자
	//서비스에서 배열 선언하고 넘겨줘도 문제되는것도 아니기에 
	//오히려 커트롤에서 파라미터로 빈 배열 넘겨주고 하면 메소드의 기능이 안좋아지고, 비 생산적이다
	//코딩도 경제적인 활동을 해야한다
	
	//재기함수 다시 봐보자 자기가 자신을 부르는것
	//메소드 많이 하지말고 서비스 하나로 끝내자
	//배열의 본연의 기능을 써서 풀어보자
	//수학도 기능들 위주로 풀어보자
	
}



















